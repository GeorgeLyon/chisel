#!/bin/bash

set -ex

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

CIRCT_SHA_FILE="$SCRIPT_DIR/circt.sha"
LLVM_SHA_FILE="$SCRIPT_DIR/llvm.sha"
SOURCE_VERSION=$(cat "$CIRCT_SHA_FILE")

TARGET_VERSION=${1:-$(cat "$CIRCT_SHA_FILE")}
MERGE_STYLE=$2

SUPPORT_WORKDIR="$SCRIPT_DIR/.workdir"
mkdir -p "$SUPPORT_WORKDIR"
cd "$SUPPORT_WORKDIR"

REPO_ROOT=$(git rev-parse --show-toplevel)
MLIR_DIR="$REPO_ROOT/mlir"
CHECKOUT_DIR="$SUPPORT_WORKDIR/checkout"
CIRCT_CHANGES_PATCH="$SCRIPT_DIR/circt.diff"
LLVM_CHANGES_PATCH="$SCRIPT_DIR/llvm.diff"

# Check that the repo is clean
if [ ! -z "$(git ls-files --others -t -- ../{llvm,circt})" ]; then
  echo "LLVM and CIRCT worktree must not have untracked files, aborting."
  exit 1
fi

# Clone if  needed
if [ ! -d "$CHECKOUT_DIR" ]; then 
  git clone --recurse-submodules https://github.com/llvm/circt.git "$CHECKOUT_DIR"
  git -C "$CHECKOUT_DIR" config --local advice.detachedHead false
fi

# Fetch the latest changes
git -C "$CHECKOUT_DIR" fetch --all

# Check that the checkout is clean
if [ ! -z "$(git -C "$CHECKOUT_DIR" clean -fdx --dry-run)" ]; then
  echo "Cloned repo has unexpected changes, aborting."
  exit 1
fi

create_remote_snapshot () {
  SNAPSHOT_DIR="$1"
  SNAPSHOT_VERSION="$2"
  rm -rf "$SNAPSHOT_DIR"
  mkdir -p "$SNAPSHOT_DIR"
  git -C "$CHECKOUT_DIR" checkout "$SNAPSHOT_VERSION"
  git -C "$CHECKOUT_DIR" submodule update --init --recursive
  rsync -avq \
    --exclude={llvm,.git} \
    "$CHECKOUT_DIR/" "$SNAPSHOT_DIR/circt"
  rsync -avq \
    --exclude='llvm/'{test,lib/Target}'/**' \
    --include={llvm,mlir,cmake,third-party}{,'/**'} \
    --exclude='*' \
    "$CHECKOUT_DIR/llvm/" "$SNAPSHOT_DIR/llvm"
  # Not sure we actually need these but good to have
  rsync -avq \
    --prune-empty-dirs \
    --include={AArch64,X86,RISCV}'/**' \
    --exclude='*/**' \
    "$CHECKOUT_DIR/llvm/llvm/lib/Target/" "$SNAPSHOT_DIR/llvm/llvm/lib/Target"
  touch "$SNAPSHOT_DIR/llvm/llvm/test/CMakeLists.txt"
}

# Create target snapshot
TARGET_SNAPSHOT_DIR="snapshots/target"
create_remote_snapshot "$TARGET_SNAPSHOT_DIR" "$TARGET_VERSION"

# The version currently in the checkout directory matches $TARGET_VERSION
TARGET_CIRCT_SHA=$(git -C "$CHECKOUT_DIR" rev-parse HEAD)
TARGET_LLVM_SHA=$(git -C "$CHECKOUT_DIR/llvm" rev-parse HEAD)

if [[ "$MERGE_STYLE" == "smash" ]]; then
  # Just copy the target snapshot verbatim, overriding any local changes
  rm -rf "$MLIR_DIR/"{circt,llvm}
  echo -n "" > "$CIRCT_CHANGES_PATCH"
  echo -n "" > "$LLVM_CHANGES_PATCH"
else
  # Create source snapshot
  SOURCE_SNAPSHOT_DIR="snapshots/source"
  create_remote_snapshot "$SOURCE_SNAPSHOT_DIR" "$SOURCE_VERSION"

  # Create the local snapshot
  LOCAL_SNAPSHOT_DIR="snapshots/local"
  rm -rf "$LOCAL_SNAPSHOT_DIR"
  mkdir -p "$LOCAL_SNAPSHOT_DIR"
  rsync -avq \
    "$MLIR_DIR/circt/" "$LOCAL_SNAPSHOT_DIR/circt"
  rsync -avq \
    --exclude='*/__pycache__/*' \
    "$MLIR_DIR/llvm/" "$LOCAL_SNAPSHOT_DIR/llvm"

  # Create patches of local CIRCT and LLVM changes (tracked in Git)
  create_source_to_local_diff() {
    do_diff() {
      set +e
      diff -ruN "$SOURCE_SNAPSHOT_DIR/$1" "$LOCAL_SNAPSHOT_DIR/$1"
      if [ ! $? -le 1 ]; then
        echo "Diff failed, aborting."
        exit 1
      fi
      set -e
    }
    do_diff $1 | sed -E 's@^([+-]+ [^\t]*)\t[0-9-]+ [0-9:.]+ [0-9+-]+$@\1@' > "$2"
  }
  create_source_to_local_diff "circt" "$CIRCT_CHANGES_PATCH"
  create_source_to_local_diff "llvm" "$LLVM_CHANGES_PATCH"

  # Apply CIRCEL changes to target snapshot
  patch -d "$TARGET_SNAPSHOT_DIR/circt" -p3 -i "$CIRCT_CHANGES_PATCH"
  patch -d "$TARGET_SNAPSHOT_DIR/llvm" -p3 -i "$LLVM_CHANGES_PATCH"
fi

# Apply target snapshot to repo
rsync -avq --delete{,-excluded} \
  "$TARGET_SNAPSHOT_DIR/llvm/" "$MLIR_DIR/llvm"
rsync -avq --delete{,-excluded} \
  "$TARGET_SNAPSHOT_DIR/circt/" "$MLIR_DIR/circt"
# llvm and circt inherit the gitignore settings from the repo root, so we need to force-add all sources in the target snapshot
find "$TARGET_SNAPSHOT_DIR" -type f | sed "s@^$TARGET_SNAPSHOT_DIR/@$MLIR_DIR/@" | xargs git add -f
echo "$TARGET_CIRCT_SHA" > "$CIRCT_SHA_FILE"
echo "$TARGET_LLVM_SHA" > "$LLVM_SHA_FILE"
